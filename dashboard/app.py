# dashboard/app.py

import streamlit as st
import pandas as pd
import os
import altair as alt
from datetime import datetime

# --- Dynamically resolve data path ---
BASE_DIR = os.path.dirname(__file__)
DATA_FILE = os.path.join(BASE_DIR, "..", "ai", "customer_features.csv")

# --- Page Config ---
st.set_page_config(page_title="📊 Churn Insights Dashboard", layout="wide")
st.title("🧠 Customer Churn & Engagement Dashboard")
st.markdown("Get a high-level view of customer health, risk, and satisfaction.")

# --- Load and clean data ---
@st.cache_data(ttl=60)
def load_data():
    if not os.path.exists(DATA_FILE):
        return pd.DataFrame(), None

    df = pd.read_csv(DATA_FILE)
    df.columns = df.columns.str.strip()
    
    if "CHURN_RISK_CATEGORY" not in df.columns:
        return pd.DataFrame(), None

    # Clean + normalize
    df["CHURN_RISK_CATEGORY"] = df["CHURN_RISK_CATEGORY"].astype(str).str.strip().str.title()
    df["AVG_FEEDBACK_RATING"] = df["AVG_FEEDBACK_RATING"].fillna(0.0)

    updated = datetime.fromtimestamp(os.path.getmtime(DATA_FILE))
    return df, updated

df, updated_time = load_data()

if df.empty:
    st.error("🚫 No data file found or the file is empty / malformed.")
    st.stop()

# --- Sidebar Filters ---
with st.sidebar:
    st.header("🔍 Filter Customers")
    categories = sorted(df["CHURN_RISK_CATEGORY"].dropna().unique())
    churn_filter = st.multiselect("Churn Risk Category", categories, default=categories)
    min_txn = st.slider("Min Transactions", 0, int(df["TXN_COUNT"].max()), 0)
    show_table = st.checkbox("Show Raw Table", value=False)

# --- Apply filters ---
filtered_df = df.copy()
filtered_df = filtered_df[filtered_df["CHURN_RISK_CATEGORY"].isin(churn_filter)]
filtered_df = filtered_df[filtered_df["TXN_COUNT"] >= min_txn]

# --- Update Message ---
st.markdown(f"""
<div style="padding:8px; background-color:#2c3e50; color:#ffffff; border-radius:6px; font-size:0.9em;">
📁 <b>Last data refresh:</b> {updated_time.strftime('%b %d, %Y %I:%M %p')}
</div>
""", unsafe_allow_html=True)

st.divider()

# --- KPIs ---
st.markdown("### 📈 Key Metrics")
col1, col2, col3, col4 = st.columns(4)
col1.metric("👥 Customers", len(filtered_df))
col2.metric("⭐ Avg Feedback", f"{filtered_df['AVG_FEEDBACK_RATING'].mean():.2f}")
col3.metric("🎫 Avg Support Tickets", f"{filtered_df['SUPPORT_TICKET_COUNT'].mean():.2f}")
col4.metric("🛒 Avg Order Value", f"${filtered_df['AVG_ORDER_VALUE'].mean():.2f}")

st.divider()

# --- Churn Bar Chart ---
st.markdown("### 🔥 Customers by Churn Risk Category")

churn_counts = filtered_df["CHURN_RISK_CATEGORY"].value_counts().reset_index()
churn_counts.columns = ["Churn Risk", "Count"]

if not churn_counts.empty:
    churn_chart = alt.Chart(churn_counts).mark_bar().encode(
        x=alt.X("Churn Risk:N", sort="-y"),
        y="Count:Q",
        tooltip=["Churn Risk", "Count"],
        color="Churn Risk:N"  # Let Altair handle default coloring
    ).properties(width=600, height=300)

    st.altair_chart(churn_chart, use_container_width=True)
else:
    st.warning("⚠️ No data available for selected filters to render Churn Category chart.")

# --- Feedback Boxplot ---
st.markdown("### 💬 Feedback vs Churn Risk")
if not filtered_df.empty:
    feedback_chart = alt.Chart(filtered_df).mark_boxplot(extent='min-max').encode(
        x="CHURN_RISK_CATEGORY:N",
        y="AVG_FEEDBACK_RATING:Q",
        color="CHURN_RISK_CATEGORY:N",  # <- default color
        tooltip=["CHURN_RISK_CATEGORY", "AVG_FEEDBACK_RATING"]
    ).properties(width=600, height=300)

    st.altair_chart(feedback_chart, use_container_width=True)
else:
    st.warning("⚠️ No data to show feedback chart.")

# # --- Support Ticket Bar Chart ---
st.markdown("### 🎫 Support Ticket Volume by Churn Risk")
if not filtered_df.empty:
    support_chart = alt.Chart(filtered_df).mark_bar().encode(
        x="CHURN_RISK_CATEGORY:N",
        y="mean(SUPPORT_TICKET_COUNT):Q",
        color="CHURN_RISK_CATEGORY:N",  # <- default color
        tooltip=["CHURN_RISK_CATEGORY", "SUPPORT_TICKET_COUNT"]
    ).properties(width=600, height=300)

    st.altair_chart(support_chart, use_container_width=True)
else:
    st.warning("⚠️ No data to show support ticket chart.")

# --- Raw Table (optional) ---
if show_table:
    st.markdown("### 📄 Raw Customer Data")
    st.dataframe(filtered_df.reset_index(drop=True), use_container_width=True)

# --- Legend ---
with st.expander("🧾 Churn Risk Category Definitions"):
    st.markdown("""
    - **Low Risk**: Highly engaged, long tenure, high feedback  
    - **Medium Risk**: Neutral signals, moderate support activity  
    - **High Risk**: Poor feedback, long silence, or high ticket volume  
    *(Note: Actual colors are auto-generated by Altair and may vary between sessions.)*
    """)